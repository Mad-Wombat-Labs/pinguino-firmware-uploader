on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    tags:
    - 'v*'
  workflow_dispatch:

name: Build, Release and Upload Release Asset

jobs:
  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.9]   # try later with 3.7 to see if we can
                              # drop this
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Get Release Version
        shell: bash
        id: vars
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      # - name: Set RELEASE_VERSION
      #   env:
      #     RELEASE_VERSION: ${{steps.vars.outputs.tag}}
      - name: Setup up ${{ matrix.python-version}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version}}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyusb
          if ( Test-Path -Path requirements.txt ) { pip install -r requirements.txt }
        
      - name: Lint with flake8 # from github example
        run: |
          # install it
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Install pyinstaller
        run: |
          pip install pyinstaller

      - name: Run pyinstaller
        run: |
          pyinstaller -y FirmwareUploader.spec
      - name: Zip up distribution
        run: |
          cd dist/FirmwarUploader
          7z a ../../FirmwareUploader-${{ env.RELEASE_VERSION }}.zip ./ -r

      - name: Download Marquee
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://nsis.sourceforge.io/mediawiki/images/1/13/Marquee.zip
          file-name: marquee.zip
          location: ${{ github.workspace }}
          
      - name: Download NSISunzip
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: https://nsis.sourceforge.io/mediawiki/images/5/5a/NSISunzU.zip
          file-name: nsisunzU.zip
          location: ${{ github.workspace }}
          
      - name: Make plugins dir
        shell: bash
        run: |
          mkdir -p nsis-plugins/x86-ansi
          mkdir nsis-plugins/x86-unicode
          7z x -o"." "marquee.zip"
          mv "Marquee.dll" nsis-plugins/x86-ansi/
          7z x -o"." "nsisunzU.zip"
          mv "NSISunzU/Plugin unicode/nsisunz.dll" "nsis-plugins/x86-ansi/"

      - name: Create nsis installer
        uses: joncloud/makensis-action@v3.4
        with:
          additional-plugin-paths: ${{ github.workspace }}/nsis-plugins
          script-file: ${{ github.workspace }}/windows/installer.nsi

      - name : get installer version
        shell: bash
        run: |
          grep 'INSTALLER_VERSION' windows/installer.nsi | head -n 1 | awk '{print $3}' | tr -d "'"
          echo "INSTALLER_VERSION=$(grep 'INSTALLER_VERSION' windows/installer.nsi | head -n 1 | awk '{print $3}' | tr -d \')" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./FirmwareUploader-${{ env.RELEASE_VERSION }}.zip
          asset_name: FirmwareUploader-${{ env.RELEASE_VERSION }}.zip
          asset_content_type: application/zip
          asset_path: windows/Pinguino-Firmware-Uploader-Installer-v${{env.INSTALLER_VERSION}}.exe
          asset_name: Pinguino-Firmware-Uploader-Installer-v${{env.INSTALLER_VERSION}}.exe
          asset_content_type: application/exe
